Um mit der Dashboard Entwicklung zu starten braucht man:

VM
---
Eine virtuelle Maschine zur Entwicklung. Unter Linux
reicht eine Container Virtualisierung völlig aus,
VirtualBox, VMWare oder KVM funktionieren aber genauso.

Für Debian / Ubuntu VMs haben wir die nötigen
Installationsbefehle im Script InstallDevEnv.sh
zusammengestellt.

Sourcen
-------
Die Sourcen in der VM mit

cd /opt/app
git clone https://github.com/pingworks/dash.git dash

installiert werden.


Webserver
---------
In der VM muss ein Webserver installiert werden. Dieser
braucht Unterstützung für Rewriting und PHP.

Die Apache Konfiguration könnte für development so
aussehen:
<VirtualHost *:80>
  ServerName dash-dev

  # Dash
  DocumentRoot /opt/app/dash/frontend
  SetEnv APPLICATION_ENV "development"

  <Directory /opt/app/dash/frontend>
    RewriteEngine On
    RewriteBase /
    RewriteCond %{REQUEST_FILENAME} -s [OR]
    RewriteCond %{REQUEST_FILENAME} -l [OR]
    RewriteCond %{REQUEST_FILENAME} -d
    RewriteRule ^.*$ - [NC,L]
    RewriteRule ^.*$ rest.php [NC,L]
  </Directory>

  Alias /rest.php /opt/app/dash/backend/public/rest.php
</VirtualHost>

Für production:
<VirtualHost *:80>
 ServerName dash

  DocumentRoot /opt/dash/public

  SetEnv APPLICATION_ENV "production"

  <Directory /opt/dash/public>
    AllowOverride All
    Order allow,deny
    Allow from all
  </Directory>

</VirtualHost>


Sencha command
--------------
Für das Buildsystem braucht man das Sencha Command Line
Tool von [1], eine Dokumentation dazu findet sich unter
[2].


Ant
---
Zur lokalen Durchführung eines Builds brauch man außerdem
ant, ant-contrib, ruby und rubygems oder compass.


Tests
-----
Zur Durchführung der Tests braucht man phpunit.

Die Jasmine Tests brauchen phantomjs [3] als headless
Webkit Engine.
Die Seleniumtests brauchen zusätzlich eine Framebuffer
X-Server und einen firefox.

Zum Start des Selenium-Servers in Kombination mit dem
Framebuffer X-Server kann man hier [4] Informationen
finden.

Die Testdaten können über das Paket dash-tests-data
installiert werden. Mit einer zweiten Apache Konfiguration
im APPLICATION_ENV "testing" werden die so installierten
Testdaten automatisch benutzt:
<VirtualHost *>
 ServerName dash-test

  DocumentRoot /opt/dash/public

  SetEnv APPLICATION_ENV "testing"

  <Directory /opt/dash/public>
    AllowOverride All
    Order allow,deny
    Allow from all
  </Directory>

</VirtualHost>


Build
------
Ein kompletter Build mit allen Tests Unittests kann im
Toplevel Directory mit

ant package

ausgeführt werden.
Integrationstests können mit

cd tests
ant backendtest

Systemtests mit

cd tests
ant systemtest

durchgeführt werden.

[1]: http://www.sencha.com/products/sencha-cmd/download
[2]: http://docs.sencha.com/extjs/4.2.0/#!/guide/command
[3]: http://phantomjs.org/
[4]: https://github.com/generalredneck/headless-selenium
